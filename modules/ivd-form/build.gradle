/*
 * Electronic Logistics Management Information System (eLMIS) is a supply chain management system for health commodities in a developing country setting.
 *
 * Copyright (C) 2015  John Snow, Inc (JSI). This program was produced for the U.S. Agency for International Development (USAID). It was prepared under the USAID | DELIVER PROJECT, Task Order 4.
 *
 * This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

apply plugin: 'cobertura'

dependencies {
    compile 'org.slf4j:jcl-over-slf4j:1.6.6'
    compile project(':modules:email')
    compile project(':modules:equipment')
    compile 'org.springframework:spring-context:4.1.5.RELEASE'
    compile 'commons-logging:commons-logging:1.2'
    compile 'com.lowagie:itext:2.1.7.js5'
    compile 'org.slf4j:slf4j-api:1.7.7'
    compile 'org.mybatis:mybatis:3.2.8'
    compile 'io.swagger:swagger-annotations:1.5.18'
    compile 'joda-time:joda-time:2.7'
    compile 'org.codehaus.castor:castor-xml:1.3.3'
    compile 'org.springframework:spring-beans:4.1.5.RELEASE'
    testCompile 'junit:junit-dep:4.8.1'
    testCompile 'org.hamcrest:hamcrest-core:1.3'
    testCompile 'org.hamcrest:hamcrest-library:1.2'

    compile project(':modules:core')
    compile project(':modules:demographics')
   
    testCompile project(path: ':modules:core', configuration: 'testFixtures'),
                project(path: ':modules:demographics', configuration: 'testFixtures')

    configurations {
        testFixtures {
            extendsFrom testRuntime
        }
    }

    task testJar(type: Jar) {
        from sourceSets.test.output
        classifier = 'test'
    }

    artifacts {
        testFixtures testJar
    }
}

cobertura {
    coverageFormats << 'xml'
    coverageIgnoreTrivial = true

}
