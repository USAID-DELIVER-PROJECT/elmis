/*
 * This program is part of the OpenLMIS logistics management information system platform software.
 * Copyright © 2013 VillageReach
 *
 * This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
 *  
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for more details.
 * You should have received a copy of the GNU Affero General Public License along with this program.  If not, see http://www.gnu.org/licenses.  For additional information contact info@OpenLMIS.org. 
 */

import groovy.sql.Sql

configurations {
  flyway
  classpath
}

dependencies {
  compile 'org.springframework:spring-beans:4.1.5.RELEASE'
  compile 'org.springframework:spring-context:4.1.5.RELEASE'
  compile 'org.mybatis:mybatis:3.2.8'
  compile 'org.mybatis:mybatis-spring:1.3.2'
  compile 'com.mchange:c3p0:0.9.5.2'
  compile 'org.postgresql:postgresql:42.1.4'
  runtime 'org.postgresql:postgresql:42.1.4'


  testCompile 'junit:junit-dep:4.8.1'
  testCompile 'org.hamcrest:hamcrest-core:1.3'

  flyway 'com.googlecode.flyway:flyway-ant:1.7',
      'org.postgresql:postgresql:42.1.4'

  classpath 'org.postgresql:postgresql:42.1.4'

  configurations {
    testFixtures {
      extendsFrom testRuntime
    }
  }

  task testJar(type: Jar) {
    from sourceSets.test.output
    classifier = 'test'
  }

  artifacts {
    testFixtures testJar
  }

}

String connectionString = "$dbUrlPrefix$databaseHostName:$databasePort/$dbName"
connectionString += (dbSslEnabled == 'true') ? "?ssl=true&sslfactory=org.postgresql.ssl.NonValidatingFactory" : ""


task dropDB {
  doLast {
    println("Dropping Database..")
    if (!closeActiveConnections("procpid")) {
      closeActiveConnections("pid")
    }
    executeSql("DROP DATABASE IF EXISTS $dbName")
  }
}

task createDB {
  dependsOn dropDB
  doLast {
    println("Creating Database..")
    executeSql("create database $dbName")
  }
}


task migrateDB {
  doLast {
    println("Migrating database..")
    ext.flyway_classpath = files(sourceSets.main.resources.srcDirs) + files(configurations.flyway)
    ant.taskdef(name: 'flywayMigrate', classname: 'com.googlecode.flyway.ant.MigrateTask', classpath: ext.flyway_classpath.asPath)
    ant.flywayMigrate(driver: dbDriver, url: connectionString, user: dbUser, password: dbPassword, baseDir: '_db/migration')
  }
}

task setupDB {
  dependsOn createDB

  doLast {

    executeSql('create schema atomfeed', true)

    ext.flyway_classpath = files(configurations.flyway)
    ant.taskdef(name: 'flywayInit', classname: 'com.googlecode.flyway.ant.InitTask', classpath: ext.flyway_classpath.asPath)
    ant.flywayInit(driver: dbDriver, url: connectionString, user: dbUser, password: dbPassword)
  }
  finalizedBy migrateDB
}



task dropSchemas {
  doLast {
    executeSql('drop schema public cascade ', true)
    executeSql('drop schema atomfeed cascade ', true)
  }
}

task createSchemas {
  doLast {
    executeSql('create schema public', true)
    executeSql('create schema atomfeed', true)
  }
}

def boolean closeActiveConnections(String pid) {
    try {
        executeSql("SELECT pg_terminate_backend($pid) FROM pg_stat_activity WHERE datname='$dbName'")
        return true
    } catch (Exception e) {
        return false
    }
}


task testSeed(type: Exec) {
    environment("PGPASSWORD", dbPassword)
    commandLine 'psql', '-U', dbUser, '--file', '../../test-data/sql/seed.sql', '-h', databaseHostName, '-w', dbName
}

task vimsSeed(type: Exec) {
    environment("PGPASSWORD", dbPassword)
    commandLine 'psql', '-U', dbUser, '--file', '../../test-data/vims/seed.sql', '-h', databaseHostName, '-w', dbName
}

task seed(type: Exec) {
    environment("PGPASSWORD", dbPassword)
    commandLine 'psql', '-U', dbUser, '--file', 'src/main/resources/seed/seed.sql', '-h', databaseHostName, '-w', dbName
}

def executeSql(String statement, Boolean includeDbName = false) {
    def connectionString = "jdbc:postgresql://$databaseHostName:$databasePort/"

    connectionString += (includeDbName) ? "$dbName" : ""

    connectionString += (dbSslEnabled == 'true') ? "?ssl=true&sslfactory=org.postgresql.ssl.NonValidatingFactory" : ""

    configurations.classpath.each { file ->
        gradle.class.classLoader.addURL(file.toURI().toURL())
    }

   // Class.forName(dbDriver)

    Sql.newInstance(connectionString, dbUser, dbPassword, dbDriver).execute(statement)
}

